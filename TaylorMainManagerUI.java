/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author taylor
 */
public class TaylorMainManagerUI extends javax.swing.JFrame {

    /**
     * Creates new form TaylorMainManagerUI
     */
    public TaylorMainManagerUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        shiftTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        jbAddEmployee = new javax.swing.JButton();
        jbEditEmployee = new javax.swing.JButton();
        jbRemoveEmployee = new javax.swing.JButton();
        jbAddShift = new javax.swing.JButton();
        jbEditShift = new javax.swing.JButton();
        jbRemoveShift = new javax.swing.JButton();
        jbRefreshEmployee = new javax.swing.JButton();
        jbRefreshShift = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        shiftTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Clocked In", "Clocked Out", "Break Start", "Break End"
            }
        ));
        jScrollPane1.setViewportView(shiftTable);

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Name", "Position"
            }
        ));
        jScrollPane2.setViewportView(employeeTable);
        if (employeeTable.getColumnModel().getColumnCount() > 0) {
            employeeTable.getColumnModel().getColumn(0).setHeaderValue("ID");
            employeeTable.getColumnModel().getColumn(1).setHeaderValue("Name");
            employeeTable.getColumnModel().getColumn(2).setHeaderValue("Position");
        }

        jbAddEmployee.setText("Add");
        jbAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddEmployeeActionPerformed(evt);
            }
        });

        jbEditEmployee.setText("Edit");
        jbEditEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditEmployeeActionPerformed(evt);
            }
        });

        jbRemoveEmployee.setText("Remove");
        jbRemoveEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveEmployeeActionPerformed(evt);
            }
        });

        jbAddShift.setText("Add");
        jbAddShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddShiftActionPerformed(evt);
            }
        });

        jbEditShift.setText("Edit");
        jbEditShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditShiftActionPerformed(evt);
            }
        });

        jbRemoveShift.setText("Remove");
        jbRemoveShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveShiftActionPerformed(evt);
            }
        });

        jbRefreshEmployee.setText("Refresh");
        jbRefreshEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeRefreshAction(evt);
            }
        });

        jbRefreshShift.setText("Refresh");
        jbRefreshShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftRefreshAction(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbAddEmployee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbEditEmployee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbRemoveEmployee)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbRefreshEmployee)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbAddShift)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbEditShift)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbRemoveShift)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbRefreshShift)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAddEmployee)
                    .addComponent(jbEditEmployee)
                    .addComponent(jbRemoveEmployee)
                    .addComponent(jbAddShift)
                    .addComponent(jbEditShift)
                    .addComponent(jbRemoveShift)
                    .addComponent(jbRefreshEmployee)
                    .addComponent(jbRefreshShift))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setBounds(0, 0, 922, 269);
    }// </editor-fold>//GEN-END:initComponents

    private void jbAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddEmployeeActionPerformed
        TaylorAddEmployeeWindow addEmpWindow = new TaylorAddEmployeeWindow();
        addEmpWindow.show();
    }//GEN-LAST:event_jbAddEmployeeActionPerformed

    private void jbEditEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditEmployeeActionPerformed
        TaylorEditEmployeeWindow editEmpWindow = new TaylorEditEmployeeWindow();
        editEmpWindow.show();
    }//GEN-LAST:event_jbEditEmployeeActionPerformed

    private void jbRemoveEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveEmployeeActionPerformed
        TaylorRemoveEmployeeWindow removeEmpWindow = new TaylorRemoveEmployeeWindow();
        removeEmpWindow.show();
    }//GEN-LAST:event_jbRemoveEmployeeActionPerformed

    private void employeeRefreshAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeRefreshAction
        String[][] empData = getFromDatabase.getEmployees();
        
        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            empData,
            new String [] {
                "ID", "Name", "Position"
            }
        ));
        
    }//GEN-LAST:event_employeeRefreshAction

    private void jbAddShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddShiftActionPerformed
        TaylorAddShiftWindow addShiftWindow = new TaylorAddShiftWindow();
        addShiftWindow.show();
    }//GEN-LAST:event_jbAddShiftActionPerformed

    private void jbEditShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditShiftActionPerformed
        TaylorEditShiftWindow editShiftWindow = new TaylorEditShiftWindow();
        editShiftWindow.show();
    }//GEN-LAST:event_jbEditShiftActionPerformed

    private void jbRemoveShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveShiftActionPerformed
        TaylorRemoveShiftWindow removeShiftWindow = new TaylorRemoveShiftWindow();
        removeShiftWindow.show();
    }//GEN-LAST:event_jbRemoveShiftActionPerformed

    private void shiftRefreshAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shiftRefreshAction
        String[][] shiftData = getFromDatabase.getShifts();
        
        shiftTable.setModel(new javax.swing.table.DefaultTableModel(
            shiftData,
            new String [] {
                "ID", "Clocked In", "Clocked Out", "Break Start", "Break End"
            }
        ));
    }//GEN-LAST:event_shiftRefreshAction

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("FlatLaf Light".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaylorMainManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaylorMainManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaylorMainManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaylorMainManagerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaylorMainManagerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable employeeTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAddEmployee;
    private javax.swing.JButton jbAddShift;
    private javax.swing.JButton jbEditEmployee;
    private javax.swing.JButton jbEditShift;
    private javax.swing.JButton jbRefreshEmployee;
    private javax.swing.JButton jbRefreshShift;
    private javax.swing.JButton jbRemoveEmployee;
    private javax.swing.JButton jbRemoveShift;
    private javax.swing.JTable shiftTable;
    // End of variables declaration//GEN-END:variables
}
